// Generated by jextract

package foreign.delivery;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class delivery_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    public static MethodHandle find_best_route$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"find_best_route");
    }
    /**
     * {@snippet :
     * void find_best_route(int ncount, double coordinates[], int out_route[]);
     * }
     */
    public static void find_best_route(int ncount, MemorySegment coordinates, MemorySegment out_route) {
        var mh$ = find_best_route$MH();
        try {
            mh$.invokeExact(ncount, coordinates, out_route);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle print_route$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"print_route");
    }
    /**
     * {@snippet :
     * void print_route(int ncount, int* out_route);
     * }
     */
    public static void print_route(int ncount, MemorySegment out_route) {
        var mh$ = print_route$MH();
        try {
            mh$.invokeExact(ncount, out_route);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


